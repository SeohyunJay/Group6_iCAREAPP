//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Group6_iCAREAPP.Models
{
    using Group6_iCAREAPP.Models;
    using System;
    using System.Collections.Generic;
    using System.Security.Cryptography;
    using System.Text;

    // Class representing user password information and related functionalities
    public partial class UserPassword
    {
        public string ID { get; set; } // Unique identifier for the user password entry
        public string userName { get; set; } // Username associated with the password
        public string encryptedPassword { get; set; } // Encrypted version of the user's password
        public int passwordExpiryTime { get; set; } // Expiry time of the password in seconds
        public Nullable<System.DateTime> userAccountExpiryDate { get; set; } // Expiry date of the user account (nullable)

        // Navigation property linking to the associated iCAREUser entity
        public virtual iCAREUser iCAREUser { get; set; }

        // Method to encrypt a password using SHA-256 hashing
        public string EncryptPassword(string password)
        {
            using (var sha256 = SHA256.Create())
            {
                byte[] bytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(password));
                StringBuilder builder = new StringBuilder();
                foreach (byte b in bytes)
                {
                    builder.Append(b.ToString("x2")); // Append each byte as a hexadecimal string
                }
                return builder.ToString(); // Return the encrypted password as a string
            }
        }

        // Static method to encrypt a password using SHA-256 hashing, used for non-instance access
        public static string StaticEncryptPassword(string password)
        {
            using (var sha256 = SHA256.Create())
            {
                byte[] bytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(password));
                StringBuilder builder = new StringBuilder();
                foreach (byte b in bytes)
                {
                    builder.Append(b.ToString("x2")); // Append each byte as a hexadecimal string
                }
                return builder.ToString(); // Return the encrypted password as a string
            }
        }

        // Method to validate if the entered password matches the stored encrypted password
        public bool ValidatePassword(string enteredPassword, string storedEncryptedPassword)
        {
            string hashedEnteredPassword = EncryptPassword(enteredPassword); // Hash the entered password
            return hashedEnteredPassword == storedEncryptedPassword; // Compare with stored password
        }
    }
}
