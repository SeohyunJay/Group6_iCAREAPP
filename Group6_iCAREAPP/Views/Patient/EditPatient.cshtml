@model Group6_iCAREAPP.Models.PatientRecord

<!-- Page title -->
<h2>Edit Patient</h2>

<!-- Back button for easy navigation -->
<button onclick="history.back()" class="btn btn-secondary mb-3">Back</button>

<!-- Form for editing patient details -->
@using (Html.BeginForm("EditPatient", "Patient", FormMethod.Post))
{
    @Html.AntiForgeryToken() <!-- CSRF protection token -->
    @Html.HiddenFor(model => model.patientID) <!-- Hidden field for patient ID -->

    <!-- Form group for patient name -->
    <div class="form-group">
        <label for="name">Name:</label>
        @Html.TextBoxFor(model => model.name, new { @class = "form-control" }) <!-- Input field for name -->
        @Html.ValidationMessageFor(model => model.name, "", new { @class = "text-danger" }) <!-- Validation message for name -->
    </div>

    <!-- Form group for patient address -->
    <div class="form-group">
        <label for="address">Address:</label>
        @Html.TextBoxFor(model => model.address, new { @class = "form-control" }) <!-- Input field for address -->
        @Html.ValidationMessageFor(model => model.address, "", new { @class = "text-danger" }) <!-- Validation message for address -->
    </div>

    <!-- Form group for date of birth -->
    <div class="form-group">
        <label for="dateOfBirth">Date of Birth:</label>
        @Html.TextBoxFor(model => model.dateOfBirth, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" }) <!-- Date picker for date of birth -->
    </div>

    <!-- Form group for height -->
    <div class="form-group">
        <label for="height">Height:</label>
        @Html.TextBoxFor(model => model.height, new { @class = "form-control" }) <!-- Input field for height -->
        @Html.ValidationMessageFor(model => model.height, "", new { @class = "text-danger" }) <!-- Validation message for height -->
    </div>

    <!-- Form group for weight -->
    <div class="form-group">
        <label for="weight">Weight:</label>
        @Html.TextBoxFor(model => model.weight, new { @class = "form-control" }) <!-- Input field for weight -->
        @Html.ValidationMessageFor(model => model.weight, "", new { @class = "text-danger" }) <!-- Validation message for weight -->
    </div>

    <!-- Form group for blood group -->
    <div class="form-group">
        <label for="bloodGroup">Blood Group:</label>
        @Html.TextBoxFor(model => model.bloodGroup, new { @class = "form-control" }) <!-- Input field for blood group -->
        @Html.ValidationMessageFor(model => model.bloodGroup, "", new { @class = "text-danger" }) <!-- Validation message for blood group -->
    </div>

    <!-- Form group for bed ID -->
    <div class="form-group">
        <label for="bedID">Bed ID:</label>
        @Html.TextBoxFor(model => model.bedID, new { @class = "form-control" }) <!-- Input field for bed ID -->
    </div>

    <!-- Form group for treatment area -->
    <div class="form-group">
        <label for="treatmentArea">Treatment Area:</label>
        @Html.TextBoxFor(model => model.treatmentArea, new { @class = "form-control" }) <!-- Input field for treatment area -->
    </div>

    <!-- Form group for geolocation ID -->
    <div class="form-group">
        <label for="geoID">Geolocation ID:</label>
        @Html.DropDownList("geoID", ViewBag.GeoCodes as SelectList, "Select Geolocation", new { @class = "form-control" }) <!-- Dropdown for selecting geolocation -->
        @Html.ValidationMessageFor(model => model.geoID, "", new { @class = "text-danger" }) <!-- Validation message for geolocation -->
    </div>

    <!-- Submit button -->
    <button type="submit" class="btn btn-primary">Save Changes</button>
}

<!-- Include scripts for client-side validation -->
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
